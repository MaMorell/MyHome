@page "/settings"

@using MudBlazor
@using MyHome.Core.Models.Entities.Profiles
@using MyHome.Core.Models.Integrations.HeatPump
@using MyHome.Core.Models.Interfaces
@using MyHome.Web.ExternalClients

<PageTitle>Inställningar</PageTitle>

<MudText Typo="Typo.h2" Color="Color.Primary" Class="mb-8">Inställningar</MudText>

<MudBlazor.MudContainer Class="mt-10" MaxWidth="MaxWidth.Large">
    @if (Profile != null)
    {
        <MudGrid>
            <MudItem xs="12" sm="6">
                <DeviceProfileCard Profile="@Profile.HeatOffsets" Title="Värmepump - Värmejustering" MinValue="-10" MaxValue="10"></DeviceProfileCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <DeviceProfileCard Profile="@Profile.RadiatorTemperatures" Title="Garage/friggebod - Temperatur (°C)" MinValue="5" MaxValue="25"></DeviceProfileCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <DeviceProfileEnumCard T="ComfortMode" Profile="@Profile.ComfortModes" Title="Värmepump - Vatten Komfortläge"></DeviceProfileEnumCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <DeviceProfileEnumCard T="OpMode" Profile="@Profile.OpModes" Title="Värmepump - Elpatron Driftläge"></DeviceProfileEnumCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <DeviceProfileCard Profile="@Profile.FloorHeaterTemperatures" Title="Golvvärme - Temperatur (°C)" MinValue="5" MaxValue="25"></DeviceProfileCard>
            </MudItem>
        </MudGrid>
        <MudCard Elevation="4" Class="mt-6">
            <MudCardActions Class="d-flex justify-end pa-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DefaultProfile" class="mr-5">Återställ</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="SaveProfile">Spara</MudButton>
            </MudCardActions>
        </MudCard>
    }
    else
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
</MudBlazor.MudContainer>

@code {
    [Inject]
    private DeviceSettingsProfileClient ProfilesClient { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    public DeviceSettingsProfile? Profile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Profile = await ProfilesClient.GetPriceThearsholds();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading profile: {ex.Message}", Severity.Error);
            Profile = null;
        }
    }

    private async Task SaveProfile()
    {
        if (Profile == null)
            return;

        await SaveProfile(Profile);
    }

    private async Task SaveProfile(DeviceSettingsProfile profile)
    {
        try
        {
            await ProfilesClient.UpdatePriceThearsholds(profile);
            Snackbar.Add("Settings saved successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving settings: {ex.Message}", Severity.Error);
        }
    }

    private void DefaultProfile(MouseEventArgs args)
    {
        Profile = new DeviceSettingsProfile();
    }
}
