@page "/table"
@using MudBlazor.Components.Chart.Models
@using MyHome.Core.Models.EnergySupplier
@using MudBlazor

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject EnergyPriceClient EnergyPriceClient

<PageTitle>Elprisreglering</PageTitle>

<MudContainer Class="ma-4">
    <h1>Elprisreglering</h1>

    <MudTable Class="ma-4" Items="prices" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Datum</MudTh>
            <MudTh>Pris (sek)</MudTh>
            <MudTh>Prisnivå</MudTh>
            <MudTh>Värmereglering</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Datum">@context.Time.ToString()</MudTd>
            <MudTd DataLabel="Pris (sek)">@Math.Round(@context.Price, 2) SEK</MudTd>
            <MudTd DataLabel="Prisnivå">@context.PriceLevel.ToString()</MudTd>
            <MudTd DataLabel="Värmereglering">@context.RelativePriceLevel</MudTd>

        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private IEnumerable<EnergyPrice> prices = new List<EnergyPrice>();
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        try
        {
            var pricesTask = EnergyPriceClient.GetEnergyPricesAsync();
            var waitTask = Task.Delay(500);

            await Task.WhenAll(pricesTask, waitTask);

            prices = await pricesTask;
        }
        finally
        {
            _loading = false;
        }

    }
}
