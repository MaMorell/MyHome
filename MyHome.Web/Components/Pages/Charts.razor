@page "/charts"
@using MudBlazor
@using MudBlazor.Components.Chart.Models
@using MyHome.Core.Models.EnergySupplier
@inject EnergySupplierClient EnergyPriceClient
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudPaper Elevation="0" Class="mb-8">
        <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-2">Elprisöversikt</MudText>
        <MudText Typo="Typo.subtitle1">Översikt över elpriser och prisnivåer över tid</MudText>
    </MudPaper>

    @if (_loading)
    {
        <MudPaper Class="pa-8 d-flex align-center justify-center" Elevation="0">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudPaper>
    }
    else
    {
        <MudCard Elevation="3" Class="rounded-lg">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="mr-2" />
                        Prisjustering
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                <MudPaper Elevation="0" Class="pa-4">
                    <MudTimeSeriesChart ChartSeries="@_series"
                                        @bind-SelectedIndex="Index"
                                        Width="100%"
                                        Height="400px"
                                        ChartOptions="@_options"
                                        TimeLabelSpacing="TimeSpan.FromHours(3)" />
                </MudPaper>

                @if (Index >= 0 && Index < _series[0].Data.Count)
                {
                    <MudPaper Class="mt-4 pa-4" Elevation="0">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Tidpunkt</MudText>
                                <MudText Typo="Typo.body1">@_series[0].Data[Index].DateTime.ToString("g")</MudText>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Elpris</MudText>
                                <MudText Typo="Typo.body1">@_series[0].Data[Index].Value.ToString("F2") SEK/kWh</MudText>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Prisnivå</MudText>
                                <MudText Typo="Typo.body1">@_series[1].Data[Index].Value.ToString("F1")</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private IEnumerable<EnergyPrice> prices = new List<EnergyPrice>();
    private bool _loading;

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    private ChartOptions _options = new ChartOptions
        {
            YAxisTicks = 1,
            LineStrokeWidth = 1,
        };

    private TimeSeriesChartSeries _chart1 = new();
    private TimeSeriesChartSeries _chart2 = new();
    private List<TimeSeriesChartSeries> _series = new();

    protected override async Task OnInitializedAsync()
    {
        var pricesTask = EnergyPriceClient.GetEnergyPricesAsync();
        var waitTask = Task.Delay(500);

        await Task.WhenAll(pricesTask, waitTask);

        prices = await pricesTask;

        var now = DateTime.Now;

        _chart1 = new TimeSeriesChartSeries
            {
                Index = 0,
                Name = "Elpris (SEK/kWh)",
                Data = prices.Select(p => new TimeSeriesChartSeries.TimeValue(p.Time, (double)p.Price)).ToList(),
                IsVisible = true,
                Type = TimeSeriesDiplayType.Line
            };
        _chart2 = new TimeSeriesChartSeries
            {
                Index = 1,
                Name = "Prisnivå (0 = låg, 5 = hög)",
                Data = prices.Select(p => new TimeSeriesChartSeries.TimeValue(p.Time, (double)p.RelativePriceLevel)).ToList(),
                IsVisible = true,
                Type = TimeSeriesDiplayType.Line
            };

        _series.Add(_chart1);
        _series.Add(_chart2);

        StateHasChanged();

    }
}
