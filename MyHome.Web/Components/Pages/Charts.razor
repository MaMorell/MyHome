@page "/charts"
@using MudBlazor.Components.Chart.Models

@using MudBlazor
@using MudBlazor.Components.Chart.Models
@using MyHome.Core.Models.EnergySupplier
@inject EnergyPriceClient EnergyPriceClient

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<MudContainer Class="mt-16">
    <h1>Elprisöversikt</h1>
    
    @if (_loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <MudPaper Elevation="2" Class="mt-10">
            <MudTimeSeriesChart 
                ChartSeries="@_series" 
                @bind-SelectedIndex="Index" 
                Width="100%" 
                Height="350px" 
                ChartOptions="@_options" 
                TimeLabelSpacing="TimeSpan.FromHours(3)" />                
        </MudPaper>
    }
</MudContainer>

@code {
    private IEnumerable<EnergyPrice> prices = new List<EnergyPrice>();
    private bool _loading;

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    private ChartOptions _options = new ChartOptions
        {
            YAxisTicks = 1,
            LineStrokeWidth = 1,
        };

    private TimeSeriesChartSeries _chart1 = new();
    private TimeSeriesChartSeries _chart2 = new();
    private List<TimeSeriesChartSeries> _series = new();

    protected override async Task OnInitializedAsync()
    {
        var pricesTask = EnergyPriceClient.GetEnergyPricesAsync();
        var waitTask = Task.Delay(500);

        await Task.WhenAll(pricesTask, waitTask);

        prices = await pricesTask;

        var now = DateTime.Now;

        _chart1 = new TimeSeriesChartSeries
            {
                Index = 0,
                Name = "Elpris (SEK/kWh)",
                Data = prices.Select(p => new TimeSeriesChartSeries.TimeValue(p.Time, (double)p.Price)).ToList(),
                IsVisible = true,
                Type = TimeSeriesDiplayType.Line
            };
        _chart2 = new TimeSeriesChartSeries
            {
                Index = 1,
                Name = "Prisnivå (0 = låg, 5 = hög)",
                Data = prices.Select(p => new TimeSeriesChartSeries.TimeValue(p.Time, (double)p.RelativePriceLevel)).ToList(),
                IsVisible = true,
                Type = TimeSeriesDiplayType.Line
            };

        _series.Add(_chart1);
        _series.Add(_chart2);

        StateHasChanged();

    }
}
