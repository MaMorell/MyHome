@using MudBlazor
@using MyHome.Core.Models.Entities.Profiles
@using MyHome.Web.ExternalClients

<MudBlazor.MudContainer MaxWidth="MaxWidth.Small">
    @if (Profile != null)
    {
        <MudCard Elevation="4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Color="Color.Primary">Inställningar för Prisgränser</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudStack Spacing="3">
                    <MudItem>
                        <MudText>Väldigt lågt: @Profile.VeryLow</MudText>
                        <MudSlider T="decimal" @bind-Value="Profile.VeryLow" Step="0.1m" Min="0" Max="@Profile.Low" />
                    </MudItem>
                    <MudItem>
                        <MudText>Lågt: @Profile.Low</MudText>
                        <MudSlider T="decimal" @bind-Value="Profile.Low" Step="0.1m" Min="@Profile.VeryLow" Max="@Profile.High" />
                    </MudItem>
                    <MudItem>
                        <MudText>Högt: @Profile.High</MudText>
                        <MudSlider T="decimal" @bind-Value="Profile.High" Step="0.1m" Min="@Profile.Low" Max="@Profile.VeryHigh" />
                    </MudItem>
                    <MudItem>
                        <MudText>Väldigt högt: @Profile.VeryHigh</MudText>
                        <MudSlider T="decimal" @bind-Value="Profile.VeryHigh" Step="0.1m" Min="@Profile.High" Max="3.5m" />
                    </MudItem>
                </MudStack>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-end pa-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DefaultProfile" class="mr-5">Återställ</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="SaveProfile">Spara</MudButton>
            </MudCardActions>
        </MudCard>
    }
    else
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" /> @* Show a loading indicator while fetching data *@
    }
</MudBlazor.MudContainer>

@code {
    [Inject]
    private PriceThearsholdsClient ProfilesClient { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Parameter]
    public EventCallback OnDataReloadRequested { get; set; }

    public PriceThearsholdsProfile? Profile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Profile = await ProfilesClient.GetPriceThearsholds();
        }
        catch (Exception ex)
        {
            // Handle error, e.g., show a snackbar message
            Snackbar.Add($"Error loading profile: {ex.Message}", Severity.Error);
            Profile = null; // Ensure Profile is null on error
        }
    }

    private async Task SaveProfile()
    {
        if (Profile == null) return;

        await SaveProfile(Profile);
    }

    private void DefaultProfile(MouseEventArgs args)
    {
        Profile = new PriceThearsholdsProfile();
    }

    private async Task SaveProfile(PriceThearsholdsProfile profile)
    {
        try
        {
            await ProfilesClient.UpdatePriceThearsholds(profile);
            Snackbar.Add("Settings saved successfully!", Severity.Success);

            await OnDataReloadRequested.InvokeAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving settings: {ex.Message}", Severity.Error);
        }
    }
}