@using MudBlazor
@using System.Globalization
@using MyHome.Core.Models.EnergySupplier
@using MyHome.Web.ExternalClients

<MudCard Elevation="3" Class="rounded-lg ma-5">
    <MudCardHeader Class="pb-0">
        <CardHeaderContent>
            <MudText Typo="Typo.h5">
                <MudIcon Icon="@Icons.Material.Filled.QueryStats" Class="mr-2" Color="Color.Primary" />
                Statistik
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="OnRefresh" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudDivider Class="my-4 mx-6" />
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6" sm="6">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="mr-2" />
                    Högsta månadsförbrukning
                </MudText>
                @if (TopConsumption != null && TopConsumption.Any())
                {
                    <MudList T="string" ReadOnly="true">
                        @foreach (var item in TopConsumption)
                        {
                            <MudListItem>
                                <div class="d-flex flex-column">
                                    <div class="d-flex justify-space-between align-center">
                                        <MudText>@item.Consumption.ToString("N2") kWh</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@item.Cost.ToString("C2", CultureInfo.CreateSpecificCulture("sk-SE"))</MudText>
                                    </div>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @item.PriceDetails.StartsAt.ToString("MM-dd HH:mm")
                                    </MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText>Ingen förbrukningsdata tillgänglig</MudText>
                }
            </MudItem>
            <MudItem xs="6" sm="6">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.Money" Class="mr-2" />
                    Kostnad genomsnitt dag
                </MudText>
                @if (DayConsumption != null && DayConsumption.Any())
                {

                    <MudGrid Spacing="2" Class="my-4">
                        @foreach (var item in DayConsumption)
                        {
                                <MudItem xs="5">Spotpris:</MudItem>
                                <MudItem xs="7">@item.AverageCostBySpotPrice.ToString("C2", CultureInfo.CreateSpecificCulture("sk-SE"))</MudItem>

                                <MudItem xs="5">Rörligt pris:</MudItem>
                                <MudItem xs="7">@item.AverageCostByDayPrice.ToString("C2", CultureInfo.CreateSpecificCulture("sk-SE"))</MudItem>
                                <MudItem xs="12"><MudText Typo="Typo.body2" Color="Color.Secondary">@item.Date</MudText></MudItem>
                                <MudDivider Class="my-1 mx-6" />
                                
                        }
                    </MudGrid>
                }
                else
                {
                    <MudText>Laddar...</MudText>
                }
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>
@code {
    [Inject]
    private EnergySupplierClient EnergySupplierClient { get; set; } = default!;

    public IEnumerable<EnergyConsumptionEntry>? TopConsumption { get; set; }
    public IEnumerable<DailyEnergyConsumption>? DayConsumption { get; set; }

    protected override async Task OnInitializedAsync() => await RefreshData();

    private async Task OnRefresh() => await RefreshData();

    private async Task RefreshData()
    {
        TopConsumption = await EnergySupplierClient.GetTopConsumptionAsync();
        DayConsumption = await EnergySupplierClient.GetDayConsumptionAsync();
    }
}
